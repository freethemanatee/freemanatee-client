package me.zopac.freemanatee.module.modules.exploits;

import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import me.zopac.freemanatee.event.events.DamageBlockEvent;
import me.zopac.freemanatee.event.events.EventPlayerClickBlock;
import me.zopac.freemanatee.event.events.EventPlayerResetBlockRemoving;
import me.zopac.freemanatee.module.Module;
import me.zopac.freemanatee.setting.Setting;
import me.zopac.freemanatee.setting.Settings;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

@Module.Info(name="PacketMine", category=Module.Category.EXPLOITS)
public class PacketMine
        extends Module {

    private Setting<Boolean> reset = this.register(Settings.b("Reset", false));
    private Setting<Boolean> doubleBreak = this.register(Settings.b("Double Break", false));
    @EventHandler
    private Listener<EventPlayerResetBlockRemoving> ResetBlock = new Listener<EventPlayerResetBlockRemoving>(p_Event -> {
        if (this.reset.getValue().booleanValue()) {
            p_Event.cancel();
        }
    }, new Predicate[0]);
    @EventHandler
    private Listener<EventPlayerClickBlock> ClickBlock = new Listener<EventPlayerClickBlock>(p_Event -> {
        if (this.reset.getValue().booleanValue() && PacketMine.mc.playerController.curBlockDamageMP > 0.1f) {
            PacketMine.mc.playerController.isHittingBlock = true;
        }
    }, new Predicate[0]);
    @EventHandler
    private Listener<DamageBlockEvent> OnDamageBlock = new Listener<DamageBlockEvent>(p_Event -> {
        BlockPos above;
        if (this.canBreak(p_Event.getPos())) {
            if (this.reset.getValue().booleanValue()) {
                PacketMine.mc.playerController.isHittingBlock = false;
            }
            PacketMine.mc.player.swingArm(EnumHand.MAIN_HAND);
            PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, p_Event.getPos(), p_Event.getDirection()));
            PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, p_Event.getPos(), p_Event.getDirection()));
            p_Event.cancel();
        }
        if (this.doubleBreak.getValue().booleanValue() && this.canBreak(above = p_Event.getPos().add(0, 1, 0)) && PacketMine.mc.player.getDistance((double)above.getX(), (double)above.getY(), (double)above.getZ()) <= 5.0) {
            PacketMine.mc.player.swingArm(EnumHand.MAIN_HAND);
            PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, above, p_Event.getDirection()));
            PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, above, p_Event.getDirection()));
            PacketMine.mc.playerController.onPlayerDestroyBlock(above);
            PacketMine.mc.world.setBlockToAir(above);
        }
    }, new Predicate[0]);

    @Override
    public void onUpdate() {
        PacketMine.mc.playerController.blockHitDelay = 0;
        if (this.reset.getValue().booleanValue() && PacketMine.mc.gameSettings.keyBindUseItem.isKeyDown()) {
            PacketMine.mc.playerController.isHittingBlock = false;
        }
    }

    private boolean canBreak(BlockPos pos) {
        IBlockState blockState = PacketMine.mc.world.getBlockState(pos);
        Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, (World)PacketMine.mc.world, pos) != -1.0f;
    }
}

